{"version":3,"sources":["node_modules/browser-pack/_prelude.js","js/IVPAIDAdUnit.js","js/VPAIDAdUnit.js","js/VPAIDFLASHClient.js","js/flashTester.js","js/jsFlashBridge.js","js/jsFlashBridgeRegistry.js","js/registry.js","js/utils.js","node_modules/swfobject/swfobject/src/swfobject.js"],"names":[],"mappings":"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":"VPAIDFLASHClient.js","sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()","'use strict';\n\n//simple representation of the API\nexport class IVPAIDAdUnit {\n\n    //all methods below\n    //are async methods\n    handshakeVersion(playerVPAIDVersion = '2.0', callback = undefined) {}\n\n    //creativeData is an object to be consistent with VPAIDHTML\n    initAd (width, height, viewMode, desiredBitrate, creativeData = {AdParameters:''}, environmentVars = {flashVars: ''}, callback = undefined) {}\n    resizeAd(width, height, viewMode, callback = undefined) {}\n\n    startAd(callback = undefined) {}\n    stopAd(callback = undefined) {}\n    pauseAd(callback = undefined) {}\n    resumeAd(callback = undefined) {}\n    expandAd(callback = undefined) {}\n    collapseAd(callback = undefined) {}\n    skipAd(callback = undefined) {}\n\n    //properties that will be treat as async methods\n    getAdLinear(callback) {}\n    getAdWidth(callback) {}\n    getAdHeight(callback) {}\n    getAdExpanded(callback) {}\n    getAdSkippableState(callback) {}\n    getAdRemainingTime(callback) {}\n    getAdDuration(callback) {}\n    setAdVolume(soundVolume, callback = undefined) {}\n    getAdVolume(callback) {}\n    getAdCompanions(callback) {}\n    getAdIcons(callback) {}\n}\n\nObject.defineProperty(IVPAIDAdUnit, 'EVENTS', {\n    writable: false,\n    configurable: false,\n    value: [\n        'AdLoaded',\n        'AdStarted',\n        'AdStopped',\n        'AdSkipped',\n        'AdSkippableStateChange', // VPAID 2.0 new event\n        'AdSizeChange', // VPAID 2.0 new event\n        'AdLinearChange',\n        'AdDurationChange', // VPAID 2.0 new event\n        'AdExpandedChange',\n        'AdRemainingTimeChange', // [Deprecated in 2.0] but will be still fired for backwards compatibility\n        'AdVolumeChange',\n        'AdImpression',\n        'AdVideoStart',\n        'AdVideoFirstQuartile',\n        'AdVideoMidpoint',\n        'AdVideoThirdQuartile',\n        'AdVideoComplete',\n        'AdClickThru',\n        'AdInteraction', // VPAID 2.0 new event\n        'AdUserAcceptInvitation',\n        'AdUserMinimize',\n        'AdUserClose',\n        'AdPaused',\n        'AdPlaying',\n        'AdLog',\n        'AdError'\n    ]\n});\n\n","'use strict';\n\nlet IVPAIDAdUnit = require('./IVPAIDAdUnit').IVPAIDAdUnit;\nlet ALL_VPAID_METHODS = Object.getOwnPropertyNames(IVPAIDAdUnit.prototype).filter(function (property) {\n    return ['constructor'].indexOf(property) === -1;\n});\n\nexport class VPAIDAdUnit extends IVPAIDAdUnit {\n    constructor (flash) {\n        super();\n        this._destroyed = false;\n        this._flash = flash;\n    }\n\n    _destroy() {\n        this._destroyed = true;\n        ALL_VPAID_METHODS.forEach((methodName) => {\n            this._flash.removeCallbackByMethodName(methodName);\n        });\n        IVPAIDAdUnit.EVENTS.forEach((event) => {\n            this._flash.offEvent(event);\n        });\n\n        this._flash = null;\n    }\n\n    isDestroyed () {\n        return this._destroyed;\n    }\n\n    on(eventName, callback) {\n        this._flash.on(eventName, callback);\n    }\n\n    off(eventName, callback) {\n        this._flash.off(eventName, callback);\n    }\n\n    //VPAID interface\n    handshakeVersion(playerVPAIDVersion = '2.0', callback = undefined) {\n        this._flash.callFlashMethod('handshakeVersion', [playerVPAIDVersion], callback);\n    }\n    initAd (width, height, viewMode, desiredBitrate, creativeData = {AdParameters: ''}, environmentVars = {flashVars: ''}, callback = undefined) {\n        //resize element that has the flash object\n        this._flash.setSize(width, height);\n        creativeData = creativeData || {AdParameters: ''};\n        environmentVars = environmentVars || {flashVars: ''};\n\n        this._flash.callFlashMethod('initAd', [this._flash.getWidth(), this._flash.getHeight(), viewMode, desiredBitrate, creativeData.AdParameters || '', environmentVars.flashVars || ''], callback);\n    }\n    resizeAd(width, height, viewMode, callback = undefined) {\n        //resize element that has the flash object\n        this._flash.setSize(width, height);\n\n        //resize ad inside the flash\n        this._flash.callFlashMethod('resizeAd', [this._flash.getWidth(), this._flash.getHeight(), viewMode], callback);\n    }\n    startAd(callback = undefined) {\n        this._flash.callFlashMethod('startAd', [], callback);\n    }\n    stopAd(callback = undefined) {\n        this._flash.callFlashMethod('stopAd', [], callback);\n    }\n    pauseAd(callback = undefined) {\n        this._flash.callFlashMethod('pauseAd', [], callback);\n    }\n    resumeAd(callback = undefined) {\n        this._flash.callFlashMethod('resumeAd', [], callback);\n    }\n    expandAd(callback = undefined) {\n        this._flash.callFlashMethod('expandAd', [], callback);\n    }\n    collapseAd(callback = undefined) {\n        this._flash.callFlashMethod('collapseAd', [], callback);\n    }\n    skipAd(callback = undefined) {\n        this._flash.callFlashMethod('skipAd', [], callback);\n    }\n\n    //properties that will be treat as async methods\n    getAdLinear(callback) {\n        this._flash.callFlashMethod('getAdLinear', [], callback);\n    }\n    getAdWidth(callback) {\n        this._flash.callFlashMethod('getAdWidth', [], callback);\n    }\n    getAdHeight(callback) {\n        this._flash.callFlashMethod('getAdHeight', [], callback);\n    }\n    getAdExpanded(callback) {\n        this._flash.callFlashMethod('getAdExpanded', [], callback);\n    }\n    getAdSkippableState(callback) {\n        this._flash.callFlashMethod('getAdSkippableState', [], callback);\n    }\n    getAdRemainingTime(callback) {\n        this._flash.callFlashMethod('getAdRemainingTime', [], callback);\n    }\n    getAdDuration(callback) {\n        this._flash.callFlashMethod('getAdDuration', [], callback);\n    }\n    setAdVolume(volume, callback = undefined) {\n        this._flash.callFlashMethod('setAdVolume', [volume], callback);\n    }\n    getAdVolume(callback) {\n        this._flash.callFlashMethod('getAdVolume', [], callback);\n    }\n    getAdCompanions(callback) {\n        this._flash.callFlashMethod('getAdCompanions', [], callback);\n    }\n    getAdIcons(callback) {\n        this._flash.callFlashMethod('getAdIcons', [], callback);\n    }\n}\n\n","'use strict';\n\nconst swfobject = require('swfobject');\n\nconst JSFlashBridge = require('./jsFlashBridge').JSFlashBridge;\nconst VPAIDAdUnit = require('./VPAIDAdUnit').VPAIDAdUnit;\n\nconst noop = require('./utils').noop;\nconst callbackTimeout = require('./utils').callbackTimeout;\nconst isPositiveInt = require('./utils').isPositiveInt;\nconst createElementWithID = require('./utils').createElementWithID;\nconst uniqueVPAID = require('./utils').unique('vpaid');\nconst createFlashTester = require('./flashTester.js').createFlashTester;\n\nconst ERROR = 'error';\nconst FLASH_VERSION = '10.1.0';\n\nlet flashTester = {isSupported: ()=> true}; // if the runFlashTest is not run the flashTester will always return true\n\nclass VPAIDFLASHClient {\n    constructor (vpaidParentEl, callback, swfConfig = {data: 'VPAIDFlash.swf', width: 800, height: 400}, params = { wmode: 'transparent', salign: 'tl', align: 'left', allowScriptAccess: 'always', scale: 'noScale', allowFullScreen: 'true', quality: 'high'}, vpaidOptions = { debug: false, timeout: 10000 }) {\n\n        var me = this;\n\n        this._vpaidParentEl = vpaidParentEl;\n        this._flashID = uniqueVPAID();\n        this._destroyed = false;\n        callback = callback || noop;\n\n        swfConfig.width = isPositiveInt(swfConfig.width, 800);\n        swfConfig.height = isPositiveInt(swfConfig.height, 400);\n\n        createElementWithID(vpaidParentEl, this._flashID, true);\n\n        params.movie = swfConfig.data;\n        params.FlashVars = `flashid=${this._flashID}&handler=${JSFlashBridge.VPAID_FLASH_HANDLER}&debug=${vpaidOptions.debug}&salign=${params.salign}`;\n\n        if (!VPAIDFLASHClient.isSupported()) {\n            return onError('user don\\'t support flash or doesn\\'t have the minimum required version of flash ' + FLASH_VERSION);\n        }\n\n        this.el = swfobject.createSWF(swfConfig, params, this._flashID);\n\n        if (!this.el) {\n            return onError( 'swfobject failed to create object in element' );\n        }\n\n        var handler = callbackTimeout(vpaidOptions.timeout,\n            (err, data) => {\n                $loadPendedAdUnit.call(this);\n                callback(err, data);\n            }, () => {\n                callback('vpaid flash load timeout ' + vpaidOptions.timeout);\n            }\n        );\n\n        this._flash = new JSFlashBridge(this.el, swfConfig.data, this._flashID, swfConfig.width, swfConfig.height, handler);\n\n        function onError(error) {\n            setTimeout(() => {\n                callback(new Error(error));\n            }, 0);\n            return me;\n        }\n\n    }\n\n    destroy () {\n        this._destroyAdUnit();\n\n        if (this._flash) {\n            this._flash.destroy();\n            this._flash = null;\n        }\n        this.el = null;\n        this._destroyed = true;\n    }\n\n    isDestroyed () {\n        return this._destroyed;\n    }\n\n    _destroyAdUnit() {\n        delete this._loadLater;\n\n        if (this._adUnitLoad) {\n            this._adUnitLoad = null;\n            this._flash.removeCallback(this._adUnitLoad);\n        }\n\n        if (this._adUnit) {\n            this._adUnit._destroy();\n            this._adUnit = null;\n        }\n    }\n\n    loadAdUnit(adURL, callback) {\n        $throwIfDestroyed.call(this);\n\n        if (this._adUnit) {\n            this._destroyAdUnit();\n        }\n\n        if (this._flash.isReady()) {\n            this._adUnitLoad = (err, message) => {\n                if (!err) {\n                    this._adUnit = new VPAIDAdUnit(this._flash);\n                }\n                this._adUnitLoad = null;\n                callback(err, this._adUnit);\n            };\n\n            this._flash.callFlashMethod('loadAdUnit', [adURL], this._adUnitLoad);\n        }else {\n            this._loadLater = {url: adURL, callback};\n        }\n    }\n\n    unloadAdUnit(callback = undefined) {\n        $throwIfDestroyed.call(this);\n\n        this._destroyAdUnit();\n        this._flash.callFlashMethod('unloadAdUnit', [], callback);\n    }\n    getFlashID() {\n        $throwIfDestroyed.call(this);\n        return this._flash.getFlashID();\n    }\n    getFlashURL() {\n        $throwIfDestroyed.call(this);\n        return this._flash.getFlashURL();\n    }\n}\n\nsetStaticProperty('isSupported', () => {\n    return swfobject.hasFlashPlayerVersion(FLASH_VERSION) && flashTester.isSupported();\n}, true);\n\nsetStaticProperty('runFlashTest', (swfConfig) => {\n    flashTester = createFlashTester(document.body, swfConfig);\n});\n\nfunction $throwIfDestroyed() {\n    if(this._destroyed) {\n        throw new Error('VPAIDFlashToJS is destroyed!');\n    }\n}\n\nfunction $loadPendedAdUnit() {\n    if (this._loadLater) {\n        this.loadAdUnit(this._loadLater.url, this._loadLater.callback);\n        delete this._loadLater;\n    }\n}\n\nfunction setStaticProperty(propertyName, value, writable = false) {\n    Object.defineProperty(VPAIDFLASHClient, propertyName, {\n        writable: writable,\n        configurable: false,\n        value: value\n    });\n}\n\nVPAIDFLASHClient.swfobject = swfobject;\n\nmodule.exports = VPAIDFLASHClient;\n","'use strict';\n\nconst swfobject = require('swfobject');\n\nconst FLASH_TEST = 'vpaid_video_flash_tester';\nconst FLASH_TEST_EL = 'vpaid_video_flash_tester_el';\nconst JSFlashBridge = require('./jsFlashBridge').JSFlashBridge;\nconst utils = require('./utils');\nconst MultipleValuesRegistry = require('./registry').MultipleValuesRegistry;\n\nclass FlashTester {\n    constructor(parent, swfConfig = {data: 'VPAIDFlash.swf', width: 800, height: 400}) {\n        this.parentEl = utils.createElementWithID(parent, FLASH_TEST_EL); // some browsers create global variables using the element id http://stackoverflow.com/questions/3434278/do-dom-tree-elements-with-ids-become-global-variables\n        utils.hideFlashEl(this.parentEl);\n        var params = {};\n        params.movie = swfConfig.data;\n        params.FlashVars = `flashid=${FLASH_TEST_EL}&handler=${JSFlashBridge.VPAID_FLASH_HANDLER}`;\n        params.allowScriptAccess = 'always';\n\n        this.el = swfobject.createSWF(swfConfig, params, FLASH_TEST_EL);\n        this._handlers = new MultipleValuesRegistry();\n        this._isSupported = false;\n        if (this.el) {\n            utils.hideFlashEl(this.el);\n            this._flash = new JSFlashBridge(this.el, swfConfig.data, FLASH_TEST_EL, swfConfig.width, swfConfig.height, ()=> {\n                const support = true;\n                this._isSupported = support;\n                this._handlers.get('change').forEach((callback) => {\n                    setTimeout(()=> {\n                        callback('change', support);\n                    }, 0);\n                });\n            });\n        }\n    }\n    isSupported() {\n        return this._isSupported;\n    }\n    on(eventName, callback) {\n        this._handlers.add(eventName, callback);\n    }\n}\n\nexport var createFlashTester = function createFlashTester(el, swfConfig) {\n    if (!window[FLASH_TEST]) {\n        window[FLASH_TEST] = new FlashTester(el, swfConfig);\n    }\n    return window[FLASH_TEST];\n};\n","'use strict';\n\nlet unique = require('./utils').unique;\nlet isPositiveInt = require('./utils').isPositiveInt;\nlet stringEndsWith = require('./utils').stringEndsWith;\nlet SingleValueRegistry = require('./registry').SingleValueRegistry;\nlet MultipleValuesRegistry = require('./registry').MultipleValuesRegistry;\nconst registry = require('./jsFlashBridgeRegistry');\nconst VPAID_FLASH_HANDLER = 'vpaid_video_flash_handler';\nconst ERROR = 'AdError';\n\nexport class JSFlashBridge {\n    constructor (el, flashURL, flashID, width, height, loadHandShake) {\n        this._el = el;\n        this._flashID = flashID;\n        this._flashURL = flashURL;\n        this._width = width;\n        this._height = height;\n        this._handlers = new MultipleValuesRegistry();\n        this._callbacks = new SingleValueRegistry();\n        this._uniqueMethodIdentifier = unique(this._flashID);\n        this._ready = false;\n        this._handShakeHandler = loadHandShake;\n\n        registry.addInstance(this._flashID, this);\n    }\n\n    on(eventName, callback) {\n        this._handlers.add(eventName, callback);\n    }\n\n    off(eventName, callback) {\n        return this._handlers.remove(eventName, callback);\n    }\n\n    offEvent(eventName) {\n        return this._handlers.removeByKey(eventName);\n    }\n\n    offAll() {\n        return this._handlers.removeAll();\n    }\n\n    callFlashMethod(methodName, args = [], callback = undefined) {\n        var callbackID = '';\n        // if no callback, some methods the return is void so they don't need callback\n        if (callback) {\n            callbackID = `${this._uniqueMethodIdentifier()}_${methodName}`;\n            this._callbacks.add(callbackID, callback);\n        }\n\n\n        try {\n            //methods are created by ExternalInterface.addCallback in as3 code, if for some reason it failed\n            //this code will throw an error\n            this._el[methodName]([callbackID].concat(args));\n\n        } catch (e) {\n            if (callback) {\n                $asyncCallback.call(this, callbackID, e);\n            } else {\n\n                //if there isn't any callback to return error use error event handler\n                this._trigger(ERROR, e);\n            }\n        }\n    }\n\n    removeCallback(callback) {\n        return this._callbacks.removeByValue(callback);\n    }\n\n    removeCallbackByMethodName(suffix) {\n        this._callbacks.filterKeys((key) => {\n            return stringEndsWith(key, suffix);\n        }).forEach((key) => {\n            this._callbacks.remove(key);\n        });\n    }\n\n    removeAllCallbacks() {\n        return this._callbacks.removeAll();\n    }\n\n    _trigger(eventName, event) {\n        this._handlers.get(eventName).forEach((callback) => {\n            //clickThru has to be sync, if not will be block by the popupblocker\n            if (eventName === 'AdClickThru') {\n                callback(event);\n            } else {\n                setTimeout(() => {\n                    if (this._handlers.get(eventName).length > 0) {\n                        callback(event);\n                    }\n                }, 0);\n            }\n        });\n    }\n\n    _callCallback(methodName, callbackID, err, result) {\n\n        let callback = this._callbacks.get(callbackID);\n\n        //not all methods callback's are mandatory\n        //but if there exist an error, fire the error event\n        if (!callback) {\n            if (err && callbackID === '') {\n                this.trigger(ERROR, err);\n            }\n            return;\n        }\n\n        $asyncCallback.call(this, callbackID, err, result);\n\n    }\n\n    _handShake(err, data) {\n        this._ready = true;\n        if (this._handShakeHandler) {\n            this._handShakeHandler(err, data);\n            delete this._handShakeHandler;\n        }\n    }\n\n    //methods like properties specific to this implementation of VPAID\n    getSize() {\n        return {width: this._width, height: this._height};\n    }\n    setSize(newWidth, newHeight) {\n        this._width = isPositiveInt(newWidth, this._width);\n        this._height = isPositiveInt(newHeight, this._height);\n        this._el.setAttribute('width', this._width);\n        this._el.setAttribute('height', this._height);\n    }\n    getWidth() {\n        return this._width;\n    }\n    setWidth(newWidth) {\n        this.setSize(newWidth, this._height);\n    }\n    getHeight() {\n        return this._height;\n    }\n    setHeight(newHeight) {\n        this.setSize(this._width, newHeight);\n    }\n    getFlashID() {\n        return this._flashID;\n    }\n    getFlashURL() {\n        return this._flashURL;\n    }\n    isReady() {\n        return this._ready;\n    }\n    destroy() {\n        this.offAll();\n        this.removeAllCallbacks();\n        registry.removeInstanceByID(this._flashID);\n        if (this._el.parentElement) {\n            this._el.parentElement.removeChild(this._el);\n        }\n    }\n}\n\nfunction $asyncCallback(callbackID, err, result) {\n    setTimeout(() => {\n        let callback = this._callbacks.get(callbackID);\n        if (callback) {\n            this._callbacks.remove(callbackID);\n            callback(err, result);\n        }\n    }, 0);\n}\n\nObject.defineProperty(JSFlashBridge, 'VPAID_FLASH_HANDLER', {\n    writable: false,\n    configurable: false,\n    value: VPAID_FLASH_HANDLER\n});\n\n/**\n * External interface handler\n *\n * @param {string} flashID identifier of the flash who call this\n * @param {string} typeID what type of message is, can be 'event' or 'callback'\n * @param {string} typeName if the typeID is a event the typeName will be the eventName, if is a callback the typeID is the methodName that is related this callback\n * @param {string} callbackID only applies when the typeID is 'callback', identifier of the callback to call\n * @param {object} error error object\n * @param {object} data\n */\nwindow[VPAID_FLASH_HANDLER] = (flashID, typeID, typeName, callbackID, error, data) => {\n    let instance = registry.getInstanceByID(flashID);\n    if (!instance) return;\n    if (typeName === 'handShake') {\n        instance._handShake(error, data);\n    } else {\n        if (typeID !== 'event') {\n            instance._callCallback(typeName, callbackID, error, data);\n        } else {\n            instance._trigger(typeName, data);\n        }\n    }\n};\n\n","'use strict';\n\nlet SingleValueRegistry = require('./registry').SingleValueRegistry;\nlet instances = new SingleValueRegistry();\n\nconst JSFlashBridgeRegistry = {};\nObject.defineProperty(JSFlashBridgeRegistry, 'addInstance', {\n    writable: false,\n    configurable: false,\n    value: function (id, instance) {\n        instances.add(id, instance);\n    }\n});\n\nObject.defineProperty(JSFlashBridgeRegistry, 'getInstanceByID', {\n    writable: false,\n    configurable: false,\n    value: function (id) {\n        return instances.get(id);\n    }\n});\n\nObject.defineProperty(JSFlashBridgeRegistry, 'removeInstanceByID', {\n    writable: false,\n    configurable: false,\n    value: function (id) {\n        return instances.remove(id);\n    }\n});\n\nmodule.exports = JSFlashBridgeRegistry;\n\n","'use strict';\n\nexport class MultipleValuesRegistry {\n    constructor () {\n        this._registries = {};\n    }\n    add (id, value) {\n        if (!this._registries[id]) {\n            this._registries[id] = [];\n        }\n        if (this._registries[id].indexOf(value) === -1) {\n            this._registries[id].push(value);\n        }\n    }\n    get (id) {\n        return this._registries[id] || [];\n    }\n    filterKeys (handler) {\n        return Object.keys(this._registries).filter(handler);\n    }\n    findByValue (value) {\n        var keys = Object.keys(this._registries).filter((key) => {\n            return this._registries[key].indexOf(value) !== -1;\n        });\n\n        return keys;\n    }\n    remove(key, value) {\n        if (!this._registries[key]) { return; }\n\n        var index = this._registries[key].indexOf(value);\n\n        if (index < 0) { return; }\n        return this._registries[key].splice(index, 1);\n    }\n    removeByKey (id) {\n        let old = this._registries[id];\n        delete this._registries[id];\n        return old;\n    }\n    removeByValue (value) {\n        let keys = this.findByValue(value);\n        return keys.map((key) => {\n            return this.remove(key, value);\n        });\n    }\n    removeAll() {\n        let old = this._registries;\n        this._registries = {};\n        return old;\n    }\n    size() {\n        return Object.keys(this._registries).length;\n    }\n}\n\nexport class SingleValueRegistry {\n    constructor () {\n        this._registries = {};\n    }\n    add (id, value) {\n        this._registries[id] = value;\n    }\n    get (id) {\n        return this._registries[id];\n    }\n    filterKeys (handler) {\n        return Object.keys(this._registries).filter(handler);\n    }\n    findByValue (value) {\n        var keys = Object.keys(this._registries).filter((key) => {\n            return this._registries[key] === value;\n        });\n\n        return keys;\n    }\n    remove (id) {\n        let old = this._registries[id];\n        delete this._registries[id];\n        return old;\n    }\n    removeByValue (value) {\n        let keys = this.findByValue(value);\n        return keys.map((key) => {\n            return this.remove(key);\n        });\n    }\n    removeAll() {\n        let old = this._registries;\n        this._registries = {};\n        return old;\n    }\n    size() {\n        return Object.keys(this._registries).length;\n    }\n}\n\n","'use strict';\n\nexport function unique(prefix) {\n    let count = -1;\n    return f => {\n        return `${prefix}_${++count}`;\n    };\n}\n\nexport function noop() {\n}\n\n\nexport function callbackTimeout(timer, onSuccess, onTimeout) {\n\n    let timeout = setTimeout(() => {\n\n        onSuccess = noop;\n        onTimeout();\n\n    }, timer);\n\n    return function () {\n        clearTimeout(timeout);\n        onSuccess.apply(this, arguments);\n    };\n}\n\n\nexport function createElementWithID(parent, id, cleanContent = false) {\n    var nEl = document.createElement('div');\n    nEl.id = id;\n    if (cleanContent) {\n        parent.innerHTML = '';\n    }\n    parent.appendChild(nEl);\n    return nEl;\n}\n\nexport function isPositiveInt(newVal, oldVal) {\n    return !isNaN(parseFloat(newVal)) && isFinite(newVal) && newVal > 0 ? newVal : oldVal;\n}\n\nlet endsWith = (function () {\n    if (String.prototype.endsWith) return String.prototype.endsWith;\n    return function endsWith (searchString, position) {\n        var subjectString = this.toString();\n        if (position === undefined || position > subjectString.length) {\n            position = subjectString.length;\n        }\n        position -= searchString.length;\n        var lastIndex = subjectString.indexOf(searchString, position);\n        return lastIndex !== -1 && lastIndex === position;\n    };\n})();\n\nexport function stringEndsWith(string, search) {\n    return endsWith.call(string, search);\n}\n\nexport function hideFlashEl(el) {\n    // can't use display none or visibility none because will block flash in some browsers\n    el.style.position = 'absolute';\n    el.style.left = '-1px';\n    el.style.top = '-1px';\n    el.style.width = '1px';\n    el.style.height = '1px';\n}\n","/*!    SWFObject v2.3.20130521 <http://github.com/swfobject/swfobject>\r\n    is released under the MIT License <http://www.opensource.org/licenses/mit-license.php>\r\n*/\r\n\r\n/* global ActiveXObject: false */\r\n\r\n(function (root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    // AMD\r\n    define(factory);\r\n  } else if (typeof module === 'object' && module.exports) {\r\n    // Node, CommonJS-like\r\n    module.exports = factory();\r\n  } else {\r\n    // Browser globals (root is window)\r\n    root.swfobject = factory();\r\n  }\r\n}(this, function () {\r\n\r\n    var UNDEF = \"undefined\",\r\n        OBJECT = \"object\",\r\n        SHOCKWAVE_FLASH = \"Shockwave Flash\",\r\n        SHOCKWAVE_FLASH_AX = \"ShockwaveFlash.ShockwaveFlash\",\r\n        FLASH_MIME_TYPE = \"application/x-shockwave-flash\",\r\n        EXPRESS_INSTALL_ID = \"SWFObjectExprInst\",\r\n        ON_READY_STATE_CHANGE = \"onreadystatechange\",\r\n\r\n        win = window,\r\n        doc = document,\r\n        nav = navigator,\r\n\r\n        plugin = false,\r\n        domLoadFnArr = [],\r\n        regObjArr = [],\r\n        objIdArr = [],\r\n        listenersArr = [],\r\n        storedFbContent,\r\n        storedFbContentId,\r\n        storedCallbackFn,\r\n        storedCallbackObj,\r\n        isDomLoaded = false,\r\n        isExpressInstallActive = false,\r\n        dynamicStylesheet,\r\n        dynamicStylesheetMedia,\r\n        autoHideShow = true,\r\n        encodeURIEnabled = false,\r\n\r\n    /* Centralized function for browser feature detection\r\n        - User agent string detection is only used when no good alternative is possible\r\n        - Is executed directly for optimal performance\r\n    */\r\n    ua = function () {\r\n        var w3cdom = typeof doc.getElementById !== UNDEF && typeof doc.getElementsByTagName !== UNDEF && typeof doc.createElement !== UNDEF,\r\n            u = nav.userAgent.toLowerCase(),\r\n            p = nav.platform.toLowerCase(),\r\n            windows = p ? /win/.test(p) : /win/.test(u),\r\n            mac = p ? /mac/.test(p) : /mac/.test(u),\r\n            webkit = /webkit/.test(u) ? parseFloat(u.replace(/^.*webkit\\/(\\d+(\\.\\d+)?).*$/, \"$1\")) : false, // returns either the webkit version or false if not webkit\r\n            ie = nav.appName === \"Microsoft Internet Explorer\",\r\n            playerVersion = [0, 0, 0],\r\n            d = null;\r\n        if (typeof nav.plugins !== UNDEF && typeof nav.plugins[SHOCKWAVE_FLASH] === OBJECT) {\r\n            d = nav.plugins[SHOCKWAVE_FLASH].description;\r\n            // nav.mimeTypes[\"application/x-shockwave-flash\"].enabledPlugin indicates whether plug-ins are enabled or disabled in Safari 3+\r\n            if (d && (typeof nav.mimeTypes !== UNDEF && nav.mimeTypes[FLASH_MIME_TYPE] && nav.mimeTypes[FLASH_MIME_TYPE].enabledPlugin)) {\r\n                plugin = true;\r\n                ie = false; // cascaded feature detection for Internet Explorer\r\n                d = d.replace(/^.*\\s+(\\S+\\s+\\S+$)/, \"$1\");\r\n                playerVersion[0] = toInt(d.replace(/^(.*)\\..*$/, \"$1\"));\r\n                playerVersion[1] = toInt(d.replace(/^.*\\.(.*)\\s.*$/, \"$1\"));\r\n                playerVersion[2] = /[a-zA-Z]/.test(d) ? toInt(d.replace(/^.*[a-zA-Z]+(.*)$/, \"$1\")) : 0;\r\n            }\r\n        }\r\n        else if (typeof win.ActiveXObject !== UNDEF) {\r\n            try {\r\n                var a = new ActiveXObject(SHOCKWAVE_FLASH_AX);\r\n                if (a) { // a will return null when ActiveX is disabled\r\n                    d = a.GetVariable(\"$version\");\r\n                    if (d) {\r\n                        ie = true; // cascaded feature detection for Internet Explorer\r\n                        d = d.split(\" \")[1].split(\",\");\r\n                        playerVersion = [toInt(d[0]), toInt(d[1]), toInt(d[2])];\r\n                    }\r\n                }\r\n            }\r\n            catch (e) {}\r\n        }\r\n        return {w3: w3cdom, pv: playerVersion, wk: webkit, ie: ie, win: windows, mac: mac};\r\n    }(),\r\n\r\n    /* Cross-browser onDomLoad\r\n        - Will fire an event as soon as the DOM of a web page is loaded\r\n        - Internet Explorer workaround based on Diego Perini's solution: http://javascript.nwbox.com/IEContentLoaded/\r\n        - Regular onload serves as fallback\r\n    */\r\n    onDomLoad = function () {\r\n        if (!ua.w3) { return; }\r\n        if ((typeof doc.readyState !== UNDEF && (doc.readyState === \"complete\" || doc.readyState === \"interactive\")) || (typeof doc.readyState === UNDEF && (doc.getElementsByTagName(\"body\")[0] || doc.body))) { // function is fired after onload, e.g. when script is inserted dynamically\r\n            callDomLoadFunctions();\r\n        }\r\n        if (!isDomLoaded) {\r\n            if (typeof doc.addEventListener !== UNDEF) {\r\n                doc.addEventListener(\"DOMContentLoaded\", callDomLoadFunctions, false);\r\n            }\r\n            if (ua.ie) {\r\n                doc.attachEvent(ON_READY_STATE_CHANGE, function detach() {\r\n                    if (doc.readyState === \"complete\") {\r\n                        doc.detachEvent(ON_READY_STATE_CHANGE, detach);\r\n                        callDomLoadFunctions();\r\n                    }\r\n                });\r\n                if (win == top) { // if not inside an iframe\r\n                    (function checkDomLoadedIE() {\r\n                        if (isDomLoaded) { return; }\r\n                        try {\r\n                            doc.documentElement.doScroll(\"left\");\r\n                        }\r\n                        catch (e) {\r\n                            setTimeout(checkDomLoadedIE, 0);\r\n                            return;\r\n                        }\r\n                        callDomLoadFunctions();\r\n                    }());\r\n                }\r\n            }\r\n            if (ua.wk) {\r\n                (function checkDomLoadedWK() {\r\n                    if (isDomLoaded) { return; }\r\n                    if (!/loaded|complete/.test(doc.readyState)) {\r\n                        setTimeout(checkDomLoadedWK, 0);\r\n                        return;\r\n                    }\r\n                    callDomLoadFunctions();\r\n                }());\r\n            }\r\n        }\r\n    }();\r\n\r\n    function callDomLoadFunctions() {\r\n        if (isDomLoaded || !document.getElementsByTagName(\"body\")[0]) { return; }\r\n        try { // test if we can really add/remove elements to/from the DOM; we don't want to fire it too early\r\n            var t, span = createElement(\"span\");\r\n            span.style.display = \"none\"; //hide the span in case someone has styled spans via CSS\r\n            t = doc.getElementsByTagName(\"body\")[0].appendChild(span);\r\n            t.parentNode.removeChild(t);\r\n            t = null; //clear the variables\r\n            span = null;\r\n        }\r\n        catch (e) { return; }\r\n        isDomLoaded = true;\r\n        var dl = domLoadFnArr.length;\r\n        for (var i = 0; i < dl; i++) {\r\n            domLoadFnArr[i]();\r\n        }\r\n    }\r\n\r\n    function addDomLoadEvent(fn) {\r\n        if (isDomLoaded) {\r\n            fn();\r\n        }\r\n        else {\r\n            domLoadFnArr[domLoadFnArr.length] = fn; // Array.push() is only available in IE5.5+\r\n        }\r\n    }\r\n\r\n    /* Cross-browser onload\r\n        - Based on James Edwards' solution: http://brothercake.com/site/resources/scripts/onload/\r\n        - Will fire an event as soon as a web page including all of its assets are loaded\r\n     */\r\n    function addLoadEvent(fn) {\r\n        if (typeof win.addEventListener !== UNDEF) {\r\n            win.addEventListener(\"load\", fn, false);\r\n        }\r\n        else if (typeof doc.addEventListener !== UNDEF) {\r\n            doc.addEventListener(\"load\", fn, false);\r\n        }\r\n        else if (typeof win.attachEvent !== UNDEF) {\r\n            addListener(win, \"onload\", fn);\r\n        }\r\n        else if (typeof win.onload === \"function\") {\r\n            var fnOld = win.onload;\r\n            win.onload = function () {\r\n                fnOld();\r\n                fn();\r\n            };\r\n        }\r\n        else {\r\n            win.onload = fn;\r\n        }\r\n    }\r\n\r\n    /* Detect the Flash Player version for non-Internet Explorer browsers\r\n        - Detecting the plug-in version via the object element is more precise than using the plugins collection item's description:\r\n          a. Both release and build numbers can be detected\r\n          b. Avoid wrong descriptions by corrupt installers provided by Adobe\r\n          c. Avoid wrong descriptions by multiple Flash Player entries in the plugin Array, caused by incorrect browser imports\r\n        - Disadvantage of this method is that it depends on the availability of the DOM, while the plugins collection is immediately available\r\n    */\r\n    function testPlayerVersion() {\r\n        var b = doc.getElementsByTagName(\"body\")[0];\r\n        var o = createElement(OBJECT);\r\n        o.setAttribute(\"style\", \"visibility: hidden;\");\r\n        o.setAttribute(\"type\", FLASH_MIME_TYPE);\r\n        var t = b.appendChild(o);\r\n        if (t) {\r\n            var counter = 0;\r\n            (function checkGetVariable() {\r\n                if (typeof t.GetVariable !== UNDEF) {\r\n                    try {\r\n                        var d = t.GetVariable(\"$version\");\r\n                        if (d) {\r\n                            d = d.split(\" \")[1].split(\",\");\r\n                            ua.pv = [toInt(d[0]), toInt(d[1]), toInt(d[2])];\r\n                        }\r\n                    } catch (e) {\r\n                        //t.GetVariable(\"$version\") is known to fail in Flash Player 8 on Firefox\r\n                        //If this error is encountered, assume FP8 or lower. Time to upgrade.\r\n                        ua.pv = [8, 0, 0];\r\n                    }\r\n                }\r\n                else if (counter < 10) {\r\n                    counter++;\r\n                    setTimeout(checkGetVariable, 10);\r\n                    return;\r\n                }\r\n                b.removeChild(o);\r\n                t = null;\r\n                matchVersions();\r\n            }());\r\n        }\r\n        else {\r\n            matchVersions();\r\n        }\r\n    }\r\n\r\n    /* Perform Flash Player and SWF version matching; static publishing only\r\n    */\r\n    function matchVersions() {\r\n        var rl = regObjArr.length;\r\n        if (rl > 0) {\r\n            for (var i = 0; i < rl; i++) { // for each registered object element\r\n                var id = regObjArr[i].id;\r\n                var cb = regObjArr[i].callbackFn;\r\n                var cbObj = {success: false, id: id};\r\n                if (ua.pv[0] > 0) {\r\n                    var obj = getElementById(id);\r\n                    if (obj) {\r\n                        if (hasPlayerVersion(regObjArr[i].swfVersion) && !(ua.wk && ua.wk < 312)) { // Flash Player version >= published SWF version: Houston, we have a match!\r\n                            setVisibility(id, true);\r\n                            if (cb) {\r\n                                cbObj.success = true;\r\n                                cbObj.ref = getObjectById(id);\r\n                                cbObj.id = id;\r\n                                cb(cbObj);\r\n                            }\r\n                        }\r\n                        else if (regObjArr[i].expressInstall && canExpressInstall()) { // show the Adobe Express Install dialog if set by the web page author and if supported\r\n                            var att = {};\r\n                            att.data = regObjArr[i].expressInstall;\r\n                            att.width = obj.getAttribute(\"width\") || \"0\";\r\n                            att.height = obj.getAttribute(\"height\") || \"0\";\r\n                            if (obj.getAttribute(\"class\")) { att.styleclass = obj.getAttribute(\"class\"); }\r\n                            if (obj.getAttribute(\"align\")) { att.align = obj.getAttribute(\"align\"); }\r\n                            // parse HTML object param element's name-value pairs\r\n                            var par = {};\r\n                            var p = obj.getElementsByTagName(\"param\");\r\n                            var pl = p.length;\r\n                            for (var j = 0; j < pl; j++) {\r\n                                if (p[j].getAttribute(\"name\").toLowerCase() !== \"movie\") {\r\n                                    par[p[j].getAttribute(\"name\")] = p[j].getAttribute(\"value\");\r\n                                }\r\n                            }\r\n                            showExpressInstall(att, par, id, cb);\r\n                        }\r\n                        else { // Flash Player and SWF version mismatch or an older Webkit engine that ignores the HTML object element's nested param elements: display fallback content instead of SWF\r\n                            displayFbContent(obj);\r\n                            if (cb) { cb(cbObj); }\r\n                        }\r\n                    }\r\n                }\r\n                else { // if no Flash Player is installed or the fp version cannot be detected we let the HTML object element do its job (either show a SWF or fallback content)\r\n                    setVisibility(id, true);\r\n                    if (cb) {\r\n                        var o = getObjectById(id); // test whether there is an HTML object element or not\r\n                        if (o && typeof o.SetVariable !== UNDEF) {\r\n                            cbObj.success = true;\r\n                            cbObj.ref = o;\r\n                            cbObj.id = o.id;\r\n                        }\r\n                        cb(cbObj);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    /* Main function\r\n        - Will preferably execute onDomLoad, otherwise onload (as a fallback)\r\n    */\r\n    domLoadFnArr[0] = function () {\r\n        if (plugin) {\r\n            testPlayerVersion();\r\n        }\r\n        else {\r\n            matchVersions();\r\n        }\r\n    };\r\n\r\n    function getObjectById(objectIdStr) {\r\n        var r = null,\r\n            o = getElementById(objectIdStr);\r\n\r\n        if (o && o.nodeName.toUpperCase() === \"OBJECT\") {\r\n            //If targeted object is valid Flash file\r\n            if (typeof o.SetVariable !== UNDEF) {\r\n                r = o;\r\n            } else {\r\n                //If SetVariable is not working on targeted object but a nested object is\r\n                //available, assume classic nested object markup. Return nested object.\r\n\r\n                //If SetVariable is not working on targeted object and there is no nested object,\r\n                //return the original object anyway. This is probably new simplified markup.\r\n\r\n                r = o.getElementsByTagName(OBJECT)[0] || o;\r\n            }\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    /* Requirements for Adobe Express Install\r\n        - only one instance can be active at a time\r\n        - fp 6.0.65 or higher\r\n        - Win/Mac OS only\r\n        - no Webkit engines older than version 312\r\n    */\r\n    function canExpressInstall() {\r\n        return !isExpressInstallActive && hasPlayerVersion(\"6.0.65\") && (ua.win || ua.mac) && !(ua.wk && ua.wk < 312);\r\n    }\r\n\r\n    /* Show the Adobe Express Install dialog\r\n        - Reference: http://www.adobe.com/cfusion/knowledgebase/index.cfm?id=6a253b75\r\n    */\r\n    function showExpressInstall(att, par, replaceElemIdStr, callbackFn) {\r\n\r\n        var obj = getElementById(replaceElemIdStr);\r\n\r\n        //Ensure that replaceElemIdStr is really a string and not an element\r\n        replaceElemIdStr = getId(replaceElemIdStr);\r\n\r\n        isExpressInstallActive = true;\r\n        storedCallbackFn = callbackFn || null;\r\n        storedCallbackObj = {success: false, id: replaceElemIdStr};\r\n\r\n        if (obj) {\r\n            if (obj.nodeName.toUpperCase() === \"OBJECT\") { // static publishing\r\n                storedFbContent = abstractFbContent(obj);\r\n                storedFbContentId = null;\r\n            }\r\n            else { // dynamic publishing\r\n                storedFbContent = obj;\r\n                storedFbContentId = replaceElemIdStr;\r\n            }\r\n            att.id = EXPRESS_INSTALL_ID;\r\n            if (typeof att.width === UNDEF || (!/%$/.test(att.width) && toInt(att.width) < 310)) { att.width = \"310\"; }\r\n            if (typeof att.height === UNDEF || (!/%$/.test(att.height) && toInt(att.height) < 137)) { att.height = \"137\"; }\r\n            var pt = ua.ie ? \"ActiveX\" : \"PlugIn\",\r\n                fv = \"MMredirectURL=\" + encodeURIComponent(win.location.toString().replace(/&/g, \"%26\")) + \"&MMplayerType=\" + pt + \"&MMdoctitle=\" + encodeURIComponent(doc.title.slice(0, 47) + \" - Flash Player Installation\");\r\n            if (typeof par.flashvars !== UNDEF) {\r\n                par.flashvars += \"&\" + fv;\r\n            }\r\n            else {\r\n                par.flashvars = fv;\r\n            }\r\n            // IE only: when a SWF is loading (AND: not available in cache) wait for the readyState of the object element to become 4 before removing it,\r\n            // because you cannot properly cancel a loading SWF file without breaking browser load references, also obj.onreadystatechange doesn't work\r\n            if (ua.ie && obj.readyState != 4) {\r\n                var newObj = createElement(\"div\");\r\n                replaceElemIdStr += \"SWFObjectNew\";\r\n                newObj.setAttribute(\"id\", replaceElemIdStr);\r\n                obj.parentNode.insertBefore(newObj, obj); // insert placeholder div that will be replaced by the object element that loads expressinstall.swf\r\n                obj.style.display = \"none\";\r\n                removeSWF(obj); //removeSWF accepts elements now\r\n            }\r\n            createSWF(att, par, replaceElemIdStr);\r\n        }\r\n    }\r\n\r\n    /* Functions to abstract and display fallback content\r\n    */\r\n    function displayFbContent(obj) {\r\n        if (ua.ie && obj.readyState != 4) {\r\n            // IE only: when a SWF is loading (AND: not available in cache) wait for the readyState of the object element to become 4 before removing it,\r\n            // because you cannot properly cancel a loading SWF file without breaking browser load references, also obj.onreadystatechange doesn't work\r\n            obj.style.display = \"none\";\r\n            var el = createElement(\"div\");\r\n            obj.parentNode.insertBefore(el, obj); // insert placeholder div that will be replaced by the fallback content\r\n            el.parentNode.replaceChild(abstractFbContent(obj), el);\r\n            removeSWF(obj); //removeSWF accepts elements now\r\n        }\r\n        else {\r\n            obj.parentNode.replaceChild(abstractFbContent(obj), obj);\r\n        }\r\n    }\r\n\r\n    function abstractFbContent(obj) {\r\n        var ac = createElement(\"div\");\r\n        if (ua.win && ua.ie) {\r\n            ac.innerHTML = obj.innerHTML;\r\n        }\r\n        else {\r\n            var nestedObj = obj.getElementsByTagName(OBJECT)[0];\r\n            if (nestedObj) {\r\n                var c = nestedObj.childNodes;\r\n                if (c) {\r\n                    var cl = c.length;\r\n                    for (var i = 0; i < cl; i++) {\r\n                        if (!(c[i].nodeType == 1 && c[i].nodeName === \"PARAM\") && !(c[i].nodeType == 8)) {\r\n                            ac.appendChild(c[i].cloneNode(true));\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return ac;\r\n    }\r\n\r\n    function createIeObject(url, paramStr) {\r\n        var div = createElement(\"div\");\r\n        div.innerHTML = \"<object classid='clsid:D27CDB6E-AE6D-11cf-96B8-444553540000'><param name='movie' value='\" + url + \"'>\" + paramStr + \"</object>\";\r\n        return div.firstChild;\r\n    }\r\n\r\n    /* Cross-browser dynamic SWF creation\r\n    */\r\n    function createSWF(attObj, parObj, id) {\r\n        var r, el = getElementById(id);\r\n        id = getId(id); // ensure id is truly an ID and not an element\r\n\r\n        if (ua.wk && ua.wk < 312) { return r; }\r\n\r\n        if (el) {\r\n            var o = (ua.ie) ? createElement(\"div\") : createElement(OBJECT),\r\n                attr,\r\n                attrLower,\r\n                param;\r\n\r\n            if (typeof attObj.id === UNDEF) { // if no 'id' is defined for the object element, it will inherit the 'id' from the fallback content\r\n                attObj.id = id;\r\n            }\r\n\r\n            //Add params\r\n            for (param in parObj) {\r\n                //filter out prototype additions from other potential libraries and IE specific param element\r\n                if (parObj.hasOwnProperty(param) && param.toLowerCase() !== \"movie\") {\r\n                    createObjParam(o, param, parObj[param]);\r\n                }\r\n            }\r\n\r\n            //Create IE object, complete with param nodes\r\n            if (ua.ie) { o = createIeObject(attObj.data, o.innerHTML); }\r\n\r\n            //Add attributes to object\r\n            for (attr in attObj) {\r\n                if (attObj.hasOwnProperty(attr)) { // filter out prototype additions from other potential libraries\r\n                    attrLower = attr.toLowerCase();\r\n\r\n                    // 'class' is an ECMA4 reserved keyword\r\n                    if (attrLower === \"styleclass\") {\r\n                        o.setAttribute(\"class\", attObj[attr]);\r\n                    } else if (attrLower !== \"classid\" && attrLower !== \"data\") {\r\n                        o.setAttribute(attr, attObj[attr]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (ua.ie) {\r\n                objIdArr[objIdArr.length] = attObj.id; // stored to fix object 'leaks' on unload (dynamic publishing only)\r\n            } else {\r\n                o.setAttribute(\"type\", FLASH_MIME_TYPE);\r\n                o.setAttribute(\"data\", attObj.data);\r\n            }\r\n\r\n            el.parentNode.replaceChild(o, el);\r\n            r = o;\r\n        }\r\n\r\n        return r;\r\n    }\r\n\r\n    function createObjParam(el, pName, pValue) {\r\n        var p = createElement(\"param\");\r\n        p.setAttribute(\"name\", pName);\r\n        p.setAttribute(\"value\", pValue);\r\n        el.appendChild(p);\r\n    }\r\n\r\n    /* Cross-browser SWF removal\r\n        - Especially needed to safely and completely remove a SWF in Internet Explorer\r\n    */\r\n    function removeSWF(id) {\r\n        var obj = getElementById(id);\r\n        if (obj && obj.nodeName.toUpperCase() === \"OBJECT\") {\r\n            if (ua.ie) {\r\n                obj.style.display = \"none\";\r\n                (function removeSWFInIE() {\r\n                    if (obj.readyState == 4) {\r\n                        //This step prevents memory leaks in Internet Explorer\r\n                        for (var i in obj) {\r\n                            if (typeof obj[i] === \"function\") {\r\n                                obj[i] = null;\r\n                            }\r\n                        }\r\n                        obj.parentNode.removeChild(obj);\r\n                    } else {\r\n                        setTimeout(removeSWFInIE, 10);\r\n                    }\r\n                }());\r\n            }\r\n            else {\r\n                obj.parentNode.removeChild(obj);\r\n            }\r\n        }\r\n    }\r\n\r\n    function isElement(id) {\r\n        return (id && id.nodeType && id.nodeType === 1);\r\n    }\r\n\r\n    function getId(thing) {\r\n        return (isElement(thing)) ? thing.id : thing;\r\n    }\r\n\r\n    /* Functions to optimize JavaScript compression\r\n    */\r\n    function getElementById(id) {\r\n\r\n        //Allow users to pass an element OR an element's ID\r\n        if (isElement(id)) { return id; }\r\n\r\n        var el = null;\r\n        try {\r\n            el = doc.getElementById(id);\r\n        }\r\n        catch (e) {}\r\n        return el;\r\n    }\r\n\r\n    function createElement(el) {\r\n        return doc.createElement(el);\r\n    }\r\n\r\n    //To aid compression; replaces 14 instances of pareseInt with radix\r\n    function toInt(str) {\r\n        return parseInt(str, 10);\r\n    }\r\n\r\n    /* Updated attachEvent function for Internet Explorer\r\n        - Stores attachEvent information in an Array, so on unload the detachEvent functions can be called to avoid memory leaks\r\n    */\r\n    function addListener(target, eventType, fn) {\r\n        target.attachEvent(eventType, fn);\r\n        listenersArr[listenersArr.length] = [target, eventType, fn];\r\n    }\r\n\r\n    /* Flash Player and SWF content version matching\r\n    */\r\n    function hasPlayerVersion(rv) {\r\n        rv += \"\"; //Coerce number to string, if needed.\r\n        var pv = ua.pv, v = rv.split(\".\");\r\n        v[0] = toInt(v[0]);\r\n        v[1] = toInt(v[1]) || 0; // supports short notation, e.g. \"9\" instead of \"9.0.0\"\r\n        v[2] = toInt(v[2]) || 0;\r\n        return (pv[0] > v[0] || (pv[0] == v[0] && pv[1] > v[1]) || (pv[0] == v[0] && pv[1] == v[1] && pv[2] >= v[2])) ? true : false;\r\n    }\r\n\r\n    /* Cross-browser dynamic CSS creation\r\n        - Based on Bobby van der Sluis' solution: http://www.bobbyvandersluis.com/articles/dynamicCSS.php\r\n    */\r\n    function createCSS(sel, decl, media, newStyle) {\r\n        var h = doc.getElementsByTagName(\"head\")[0];\r\n        if (!h) { return; } // to also support badly authored HTML pages that lack a head element\r\n        var m = (typeof media === \"string\") ? media : \"screen\";\r\n        if (newStyle) {\r\n            dynamicStylesheet = null;\r\n            dynamicStylesheetMedia = null;\r\n        }\r\n        if (!dynamicStylesheet || dynamicStylesheetMedia != m) {\r\n            // create dynamic stylesheet + get a global reference to it\r\n            var s = createElement(\"style\");\r\n            s.setAttribute(\"type\", \"text/css\");\r\n            s.setAttribute(\"media\", m);\r\n            dynamicStylesheet = h.appendChild(s);\r\n            if (ua.ie && typeof doc.styleSheets !== UNDEF && doc.styleSheets.length > 0) {\r\n                dynamicStylesheet = doc.styleSheets[doc.styleSheets.length - 1];\r\n            }\r\n            dynamicStylesheetMedia = m;\r\n        }\r\n        // add style rule\r\n        if (dynamicStylesheet) {\r\n            if (typeof dynamicStylesheet.addRule !== UNDEF) {\r\n                dynamicStylesheet.addRule(sel, decl);\r\n            } else if (typeof doc.createTextNode !== UNDEF) {\r\n                dynamicStylesheet.appendChild(doc.createTextNode(sel + \" {\" + decl + \"}\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    function setVisibility(id, isVisible) {\r\n        if (!autoHideShow) { return; }\r\n        var v = isVisible ? \"visible\" : \"hidden\",\r\n            el = getElementById(id);\r\n        if (isDomLoaded && el) {\r\n            el.style.visibility = v;\r\n        } else if (typeof id === \"string\") {\r\n            createCSS(\"#\" + id, \"visibility:\" + v);\r\n        }\r\n    }\r\n\r\n    /* Filter to avoid XSS attacks\r\n    */\r\n    function urlEncodeIfNecessary(s) {\r\n        var regex = /[\\\\\\\"<>\\.;]/;\r\n        var hasBadChars = regex.exec(s) !== null;\r\n        return hasBadChars && typeof encodeURIComponent !== UNDEF ? encodeURIComponent(s) : s;\r\n    }\r\n\r\n    /* Release memory to avoid memory leaks caused by closures, fix hanging audio/video threads and force open sockets/NetConnections to disconnect (Internet Explorer only)\r\n    */\r\n    var cleanup = function () {\r\n        if (ua.ie) {\r\n            window.attachEvent(\"onunload\", function () {\r\n                // remove listeners to avoid memory leaks\r\n                var ll = listenersArr.length;\r\n                for (var i = 0; i < ll; i++) {\r\n                    listenersArr[i][0].detachEvent(listenersArr[i][1], listenersArr[i][2]);\r\n                }\r\n                // cleanup dynamically embedded objects to fix audio/video threads and force open sockets and NetConnections to disconnect\r\n                var il = objIdArr.length;\r\n                for (var j = 0; j < il; j++) {\r\n                    removeSWF(objIdArr[j]);\r\n                }\r\n                // cleanup library's main closures to avoid memory leaks\r\n                for (var k in ua) {\r\n                    ua[k] = null;\r\n                }\r\n                ua = null;\r\n                for (var l in swfobject) {\r\n                    swfobject[l] = null;\r\n                }\r\n                swfobject = null;\r\n            });\r\n        }\r\n    }();\r\n\r\n    return {\r\n        /* Public API\r\n            - Reference: http://code.google.com/p/swfobject/wiki/documentation\r\n        */\r\n        registerObject: function (objectIdStr, swfVersionStr, xiSwfUrlStr, callbackFn) {\r\n            if (ua.w3 && objectIdStr && swfVersionStr) {\r\n                var regObj = {};\r\n                regObj.id = objectIdStr;\r\n                regObj.swfVersion = swfVersionStr;\r\n                regObj.expressInstall = xiSwfUrlStr;\r\n                regObj.callbackFn = callbackFn;\r\n                regObjArr[regObjArr.length] = regObj;\r\n                setVisibility(objectIdStr, false);\r\n            }\r\n            else if (callbackFn) {\r\n                callbackFn({success: false, id: objectIdStr});\r\n            }\r\n        },\r\n\r\n        getObjectById: function (objectIdStr) {\r\n            if (ua.w3) {\r\n                return getObjectById(objectIdStr);\r\n            }\r\n        },\r\n\r\n        embedSWF: function (swfUrlStr, replaceElemIdStr, widthStr, heightStr, swfVersionStr, xiSwfUrlStr, flashvarsObj, parObj, attObj, callbackFn) {\r\n\r\n            var id = getId(replaceElemIdStr),\r\n                callbackObj = {success: false, id: id};\r\n\r\n            if (ua.w3 && !(ua.wk && ua.wk < 312) && swfUrlStr && replaceElemIdStr && widthStr && heightStr && swfVersionStr) {\r\n                setVisibility(id, false);\r\n                addDomLoadEvent(function () {\r\n                    widthStr += \"\"; // auto-convert to string\r\n                    heightStr += \"\";\r\n                    var att = {};\r\n                    if (attObj && typeof attObj === OBJECT) {\r\n                        for (var i in attObj) { // copy object to avoid the use of references, because web authors often reuse attObj for multiple SWFs\r\n                            att[i] = attObj[i];\r\n                        }\r\n                    }\r\n                    att.data = swfUrlStr;\r\n                    att.width = widthStr;\r\n                    att.height = heightStr;\r\n                    var par = {};\r\n                    if (parObj && typeof parObj === OBJECT) {\r\n                        for (var j in parObj) { // copy object to avoid the use of references, because web authors often reuse parObj for multiple SWFs\r\n                            par[j] = parObj[j];\r\n                        }\r\n                    }\r\n                    if (flashvarsObj && typeof flashvarsObj === OBJECT) {\r\n                        for (var k in flashvarsObj) { // copy object to avoid the use of references, because web authors often reuse flashvarsObj for multiple SWFs\r\n                            if (flashvarsObj.hasOwnProperty(k)) {\r\n\r\n                                var key = (encodeURIEnabled) ? encodeURIComponent(k) : k,\r\n                                    value = (encodeURIEnabled) ? encodeURIComponent(flashvarsObj[k]) : flashvarsObj[k];\r\n\r\n                                if (typeof par.flashvars !== UNDEF) {\r\n                                    par.flashvars += \"&\" + key + \"=\" + value;\r\n                                }\r\n                                else {\r\n                                    par.flashvars = key + \"=\" + value;\r\n                                }\r\n\r\n                            }\r\n                        }\r\n                    }\r\n                    if (hasPlayerVersion(swfVersionStr)) { // create SWF\r\n                        var obj = createSWF(att, par, replaceElemIdStr);\r\n                        if (att.id == id) {\r\n                            setVisibility(id, true);\r\n                        }\r\n                        callbackObj.success = true;\r\n                        callbackObj.ref = obj;\r\n                        callbackObj.id = obj.id;\r\n                    }\r\n                    else if (xiSwfUrlStr && canExpressInstall()) { // show Adobe Express Install\r\n                        att.data = xiSwfUrlStr;\r\n                        showExpressInstall(att, par, replaceElemIdStr, callbackFn);\r\n                        return;\r\n                    }\r\n                    else { // show fallback content\r\n                        setVisibility(id, true);\r\n                    }\r\n                    if (callbackFn) { callbackFn(callbackObj); }\r\n                });\r\n            }\r\n            else if (callbackFn) { callbackFn(callbackObj); }\r\n        },\r\n\r\n        switchOffAutoHideShow: function () {\r\n            autoHideShow = false;\r\n        },\r\n\r\n        enableUriEncoding: function (bool) {\r\n            encodeURIEnabled = (typeof bool === UNDEF) ? true : bool;\r\n        },\r\n\r\n        ua: ua,\r\n\r\n        getFlashPlayerVersion: function () {\r\n            return {major: ua.pv[0], minor: ua.pv[1], release: ua.pv[2]};\r\n        },\r\n\r\n        hasFlashPlayerVersion: hasPlayerVersion,\r\n\r\n        createSWF: function (attObj, parObj, replaceElemIdStr) {\r\n            if (ua.w3) {\r\n                return createSWF(attObj, parObj, replaceElemIdStr);\r\n            }\r\n            else {\r\n                return undefined;\r\n            }\r\n        },\r\n\r\n        showExpressInstall: function (att, par, replaceElemIdStr, callbackFn) {\r\n            if (ua.w3 && canExpressInstall()) {\r\n                showExpressInstall(att, par, replaceElemIdStr, callbackFn);\r\n            }\r\n        },\r\n\r\n        removeSWF: function (objElemIdStr) {\r\n            if (ua.w3) {\r\n                removeSWF(objElemIdStr);\r\n            }\r\n        },\r\n\r\n        createCSS: function (selStr, declStr, mediaStr, newStyleBoolean) {\r\n            if (ua.w3) {\r\n                createCSS(selStr, declStr, mediaStr, newStyleBoolean);\r\n            }\r\n        },\r\n\r\n        addDomLoadEvent: addDomLoadEvent,\r\n\r\n        addLoadEvent: addLoadEvent,\r\n\r\n        getQueryParamValue: function (param) {\r\n            var q = doc.location.search || doc.location.hash;\r\n            if (q) {\r\n                if (/\\?/.test(q)) { q = q.split(\"?\")[1]; } // strip question mark\r\n                if (!param) {\r\n                    return urlEncodeIfNecessary(q);\r\n                }\r\n                var pairs = q.split(\"&\");\r\n                for (var i = 0; i < pairs.length; i++) {\r\n                    if (pairs[i].substring(0, pairs[i].indexOf(\"=\")) == param) {\r\n                        return urlEncodeIfNecessary(pairs[i].substring((pairs[i].indexOf(\"=\") + 1)));\r\n                    }\r\n                }\r\n            }\r\n            return \"\";\r\n        },\r\n\r\n        // For internal usage only\r\n        expressInstallCallback: function () {\r\n            if (isExpressInstallActive) {\r\n                var obj = getElementById(EXPRESS_INSTALL_ID);\r\n                if (obj && storedFbContent) {\r\n                    obj.parentNode.replaceChild(storedFbContent, obj);\r\n                    if (storedFbContentId) {\r\n                        setVisibility(storedFbContentId, true);\r\n                        if (ua.ie) { storedFbContent.style.display = \"block\"; }\r\n                    }\r\n                    if (storedCallbackFn) { storedCallbackFn(storedCallbackObj); }\r\n                }\r\n                isExpressInstallActive = false;\r\n            }\r\n        },\r\n\r\n        version: \"2.3\"\r\n\r\n    };\r\n}));\r\n"],"preExistingComment":"//# sourceMappingURL=data:application/json;charset=utf-8;base64,"}